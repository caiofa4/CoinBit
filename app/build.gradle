apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: "org.jmailen.kotlinter"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: "com.github.ben-manes.versions"

android {
    compileSdkVersion versions.compileSdk
    defaultConfig {
        applicationId "com.signal.research"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        multiDexEnabled true
        versionCode 6
        versionName "1.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8
        }
    }

    lintOptions {
        abortOnError false
    }
}

androidExtensions {
    experimental = true
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    // Example 1: reject all non stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

dependencies {
    implementation 'com.google.firebase:firebase-auth-ktx:21.0.1'


    // for testing
    testImplementation "junit:junit:${versions.junit}"
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"

    // support libraries
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.annotation:annotation:1.2.0-alpha01'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.browser:browser:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    // architecture components
    // Room
    implementation 'androidx.room:room-runtime:2.2.6'
    implementation 'androidx.room:room-ktx:2.2.6'
    kapt 'androidx.room:room-compiler:2.2.6'

    implementation "androidx.lifecycle:lifecycle-common-java8:2.2.0"

    // coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2"

    // ktx
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"

    // networking
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"

    // other dependencies
    implementation "com.jakewharton.timber:timber:${versions.timber}"
    implementation "com.google.code.gson:gson:${versions.gson}"
    implementation "com.robinhood.spark:spark:${versions.spark}"
    implementation "com.github.midorikocak:currency-picker-android:${versions.currencyPicker}"
    implementation "com.airbnb.android:lottie:${versions.lottie}"
    implementation("com.wdullaer:materialdatetimepicker:${versions.materialdate}") {
        exclude module: 'support-v13'
    }
    implementation "com.romandanylyk:pageindicatorview:${versions.pageindicator}@aar"

    // image loading
    implementation("io.coil-kt:coil:1.1.0")

    implementation "com.facebook.stetho:stetho:${versions.stetho}"
    implementation "com.facebook.stetho:stetho-okhttp3:${versions.stetho}"

    implementation "com.github.ittianyu:BottomNavigationViewEx:${versions.bottomNav}"

    // firebase
    implementation platform('com.google.firebase:firebase-bom:26.0.0')
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation "com.google.firebase:firebase-core:${versions.firebaseCore}"
    implementation "com.google.firebase:firebase-crashlytics:${versions.firebaseCrashlytics}"
    implementation "com.google.firebase:firebase-analytics:${versions.firebaseAnalytics}"
    implementation "com.google.firebase:firebase-perf:${versions.firebasePerf}"
    implementation 'com.google.android.gms:play-services-auth:18.1.0'

    // epoxy
    implementation 'com.airbnb.android:epoxy:4.2.0'
    kapt 'com.airbnb.android:epoxy-processor:4.2.0'

    // test
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.2'
}

kotlinter {
    indentSize = 4
    reporters = ['checkstyle', 'plain']
    experimentalRules = false
    disabledRules = ["no-wildcard-imports"]
}
